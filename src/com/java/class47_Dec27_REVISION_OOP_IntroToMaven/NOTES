MAVEN:

1. What is the purpose?

pom.xml file - that is the Maven file. If we see the file in the project structure - this means that it is a Maven project.
               Since XML files are plain text documents, they are easy to create, store, transport, and interpret by
               computers and humans alike. This is why XML is one of the most commonly used languages on the internet. Many
               web-based software applications store information and send information to other apps in XML format.

POM - Project Object Model
XML - Extensible Markup Language

ArtifactID - that is the name of our product.
Example: Google has a lot of different products - Maps, Drive, Gmail, etc.

GroupID helps to differentiate between the products with the same name.

<dependencies> -> opening tag
</dependencies> -> closing tag

https://mvnrepository.com/ - repository, where Maven keeps all the libraries

If after copy/pasting the dependency we have the groupId, artifactId and the version in red -
we can just click the "Maven Refresh" button.

Dependencies - library, that we need to download.
Plugin - additional application, that we need to add to pom file, so that we can perform our task

- we need Maven in order to manage our dependencies:
    we have a lot of libraries:
      * java v1.8
      * selenium (54 - 57) v3.14.59
      * testng v6.8
      * cucumber v 6.2
      * junit (2) v3.4
      * common io
      * apache poi
      * rest assured
      * sql-java

- we need Maven to automate the "build process":
    ("build steps")
    (Steps 1 - 5 Developers)
    * turn on the server
    * compile code
    * run the code
    * package the code
    * deploy the code on the server
    * compile the automation tests
    * run tests
    * generate the report
    * email the report

- we need Maven to help us unify our work - it provides a built-in Project Structure

Maven folders:

".idea" is used by IntelliJ and we do not touch that folder any time during our career
"External Libraries" - we do not use that either, that is generated by Maven
src
-> main
   -> java          - we keep the code here (App code, Developer's code)
   -> resources     - we keep the data here (App Data: images, prices, etc.)
-> src              - test code (SDET's code)
   -> java          - test data

Maven Life Cycle Phases:
Clean - delete the target folder
Validate - no errors in the project
Compile - compile the project
Test -
Package - create the .jar file of our project
Verify - verify the jar files
Site
Deploy - might need to configure this plugin

!! surefire plugin is present in Maven by default

What happens when we click Install (install is a master command, which executes all the phases before it)?
1. Maven resources plugin executed
2. Compiles the code
3. Maven jar plugin

What is inside the "target" folder?
- .class file - machine readable, compiler reads it and converts it to .java file

threadCount - we can specify how many Test Cases we would like to run in parallel

What are the drawbacks of running the Test Cases in parallel? - CPU will get high.

(What are we doing at the Class right now? - we have written the Test Script and we are trying to execute them using Maven)

